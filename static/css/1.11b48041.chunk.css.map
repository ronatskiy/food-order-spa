{"version":3,"sources":["D:/Projects/github.com/food-order-spa/src/pages/home/components/D:/Projects/github.com/food-order-spa/src/pages/home/components/D:/Projects/github.com/food-order-spa/src/pages/home/components/dish-view.scss","D:/Projects/github.com/food-order-spa/src/pages/home/components/D:/Projects/github.com/food-order-spa/src/pages/home/components/D:/Projects/github.com/food-order-spa/src/pages/home/components/today-orders.scss","D:/Projects/github.com/food-order-spa/src/pages/home/components/D:/Projects/github.com/food-order-spa/src/pages/home/components/D:/Projects/github.com/food-order-spa/node_modules/bootstrap/scss/mixins/_breakpoints.scss","D:/Projects/github.com/food-order-spa/src/components/supplier-badge/D:/Projects/github.com/food-order-spa/src/components/supplier-badge/D:/Projects/github.com/food-order-spa/src/components/supplier-badge/supplier-badge.scss"],"names":[],"mappings":"AAAA,WACC,mBAAmB,AACnB,aAAa,AACb,6BAA8B,CAQ9B,AAHA,uBACC,iBAAmB,CACnB,ACNF,cAGC,wBAAyB,CAuCzB,AA1CD,iBAME,WAL6B,AAM7B,eAAmB,CACnB,AAED,8CACC,UAV6B,CAW7B,AAGA,4BACC,yBAAyB,AACzB,oBAAyB,CACzB,ACmDC,4BDhDH,sBAEE,OAAQ,CAET,CAAA,AC4CE,4BD1CH,wBAEE,sBAAsB,AACtB,OAAQ,CAET,CAAA,AAED,6BACC,aAAa,AACb,6BAA8B,CAK9B,AC4BE,4BDnCH,6BAKE,qBAAsB,CAEvB,CAAA,AE7CF,gBAGC,sBAAsB,AACtB,yBAHe,AAIf,cAJe,AAKf,qBAAqB,AACrB,iBAAkB,AAClB,gBAAiB,AACjB,eAAiB,CACjB","file":"1.11b48041.chunk.css","sourcesContent":[".dish-view {\r\n\talign-items: center;\r\n\tdisplay: flex;\r\n\tjustify-content: space-between;\r\n\r\n\t&__name {}\r\n\t&__price {}\r\n\t&__price-value {}\r\n\t&__money-unit {\r\n\t\tmargin-left: 0.5rem;\r\n\t}\r\n}","@import \"~bootstrap/scss/functions\";\r\n@import \"~bootstrap/scss/variables\";\r\n@import \"~bootstrap/scss/mixins/breakpoints\";\r\n\r\n.today-orders {\r\n\t$text-color-secondary: #808080;\r\n\r\n\tborder-collapse: collapse;\r\n\r\n\tth {\r\n\t\tcolor: $text-color-secondary;\r\n\t\tfont-weight: normal;\r\n\t}\r\n\r\n\t&--authorized &__cell {\r\n\t\tcolor: $text-color-secondary;\r\n\t}\r\n\r\n\t&__cell{\r\n\t\t&--active {\r\n\t\t\tbackground-color: #e4f3ff;\r\n\t\t\tcolor: #333333 !important;\r\n\t\t}\r\n\t}\r\n\r\n\t&__dishes {\r\n\t\t@include media-breakpoint-down(md) {\r\n\t\t\torder: 2;\r\n\t\t}\r\n\t}\r\n\r\n\t&__supplier {\r\n\t\t@include media-breakpoint-down(md) {\r\n\t\t\talign-self: flex-start;\r\n\t\t\torder: 1;\r\n\t\t}\r\n\t}\r\n\r\n\t&__order-details {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: space-between;\r\n\r\n\t\t@include media-breakpoint-down(md) {\r\n\t\t\tflex-direction: column;\r\n\t\t}\r\n\t}\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n",".supplier-badge {\r\n\t$color: #5199db;\r\n\r\n\tbackground-color: #fff;\r\n\tborder: 1px solid $color;\r\n\tcolor: $color;\r\n\tdisplay: inline-block;\r\n\tfont-size: 0.75rem;\r\n\tfont-weight: bold;\r\n\tpadding: 0 0.5rem;\r\n}"]}